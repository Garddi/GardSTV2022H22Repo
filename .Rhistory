0.1+0.2
(0.1+0.2)-0.3
library(tidyverse)
library(stargazer)
load("C:/Users/Gard/OneDrive/Documents/STV1020/V22SeminarTing/prove/prove/siste gang/soc_survey.Rdata")
class(soc_survey$aar)
class(soc_survey$kjnn)
class(soc_survey$inntekt_prmnd)
class(soc_survey$innfl_pol)
class(soc_survey$pol_tillit)
mean(soc_survey$aar, na.rm = TRUE)
mean(soc_survey$inntekt_prmnd, na.rm = TRUE)
sd(soc_survey$aar, na.rm = TRUE)
sd(soc_survey$inntekt_prmnd, na.rm = TRUE)
ggplot(data = soc_survey, aes(x = kjnn)) + geom_bar() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
sum(is.na(soc_survey$aar))
sum(is.na(soc_survey$pol_tillit))
ggplot(data = soc_survey, aes(x = kjnn)) +
geom_boxplot(aes(y = inntekt_prmnd))
cor(x = soc_survey$inntekt_prmnd, y = soc_survey$pol_tillit,
use = "pairwise.complete.obs")
cor.test(soc_survey$inntekt_prmnd, soc_survey$pol_tillit,
use = "pairwise.complete.obs")
summary(soc_survey$aar)
dummy <- soc_survey %>%
select(aar)
dummy$dummy.aar <- factor(
ifelse(dummy$aar < median(dummy$aar, na.rm = TRUE), 1,
ifelse(dummy$aar > median(dummy$aar, na.rm = TRUE), 2, NA)),
1:2, labels = c("0", "1"))
summary(dummy$dummy.aar)
install.packages("shiny")
library(shiny)
runExample("01_hello")
runExample("02_text")
x = [1:10]
x <- [1:10]
x <- c(1:10)
y_fits <- vector()
library(tidyverse)
?case_when
server <- function(input, output, session) {
}
library(shiny)
library(tidyverse)
ui <- fluidPage(
"Hello, world!"
)
server <- function(input, output, session) {
}
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
output$summary <- renderPrint({
dataset <- get(input$dataset, "package:datasets")
summary(dataset)
})
output$table <- renderTable({
dataset <- get(input$dataset, "package:datasets")
dataset
})
}
dataset <- get(input$dataset, "package:datasets")
server <- function(input, output, session) {
# Create a reactive expression
dataset <- reactive({
get(input$dataset, "package:datasets")
})
output$summary <- renderPrint({
# Use a reactive expression by calling it like a function
summary(dataset())
})
output$table <- renderTable({
dataset()
})
}
shinyApp(ui, server)
load("C:/Users/Gard/OneDrive/Documents/GardSTV2022H22Repo/data/questionsmeta.Rdata")
d <- list()
for(x in unique(questionsmeta$id)){
it <- 100*(which(unique(questionsmeta$id) == x) / length(unique(questionsmeta$id)))
cat(paste0(sprintf("Progress: %.4f%%             ", it), "\r"))
try(d[[x]] <- get_question(questionid = x, good_manners = 0))
}
library(stortingscrape)
library(tidyverse)
library(tidytext)
library(quanteda)
library(stm)
library(tidyr)
library(viridis)
library(rvest)
library(xml2)
library(httr)
get_question(questionid = "1370", good_manners = 0)
for(x in unique(questionsmeta$id)){
it <- 100*(which(unique(questionsmeta$id) == x) / length(unique(questionsmeta$id)))
cat(paste0(sprintf("Progress: %.4f%%             ", it), "\r"))
try(d[[x]] <- get_question(questionid = x, good_manners = 0))
}
questiontext <- do.call("rbind", d)
checks <- questionsmeta$id[which(!(questionsmeta$id %in% questiontext$id))]
get_question(questionid = "90126", good_manners = 0)
get_question(questionid = "77134", good_manners = 0)
checks <- questionsmeta %>%
filter(!(questionsmeta$id %in% questiontext$id))
View(checks)
View(get_question)
View(questiontext)
setwd("C:/Users/Gard/OneDrive/Documents/GardSTV2022H22Repo")
save(questiontext, file = "data/questiontext.Rdata")
save(checks, file = "data/outliers.Rdata")
