0.1+0.2
(0.1+0.2)-0.3
library(tidyverse)
library(stargazer)
load("C:/Users/Gard/OneDrive/Documents/STV1020/V22SeminarTing/prove/prove/siste gang/soc_survey.Rdata")
class(soc_survey$aar)
class(soc_survey$kjnn)
class(soc_survey$inntekt_prmnd)
class(soc_survey$innfl_pol)
class(soc_survey$pol_tillit)
mean(soc_survey$aar, na.rm = TRUE)
mean(soc_survey$inntekt_prmnd, na.rm = TRUE)
sd(soc_survey$aar, na.rm = TRUE)
sd(soc_survey$inntekt_prmnd, na.rm = TRUE)
ggplot(data = soc_survey, aes(x = kjnn)) + geom_bar() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
sum(is.na(soc_survey$aar))
sum(is.na(soc_survey$pol_tillit))
ggplot(data = soc_survey, aes(x = kjnn)) +
geom_boxplot(aes(y = inntekt_prmnd))
cor(x = soc_survey$inntekt_prmnd, y = soc_survey$pol_tillit,
use = "pairwise.complete.obs")
cor.test(soc_survey$inntekt_prmnd, soc_survey$pol_tillit,
use = "pairwise.complete.obs")
summary(soc_survey$aar)
dummy <- soc_survey %>%
select(aar)
dummy$dummy.aar <- factor(
ifelse(dummy$aar < median(dummy$aar, na.rm = TRUE), 1,
ifelse(dummy$aar > median(dummy$aar, na.rm = TRUE), 2, NA)),
1:2, labels = c("0", "1"))
summary(dummy$dummy.aar)
install.packages("shiny")
library(shiny)
runExample("01_hello")
runExample("02_text")
x = [1:10]
x <- [1:10]
x <- c(1:10)
y_fits <- vector()
library(tidyverse)
?case_when
server <- function(input, output, session) {
}
library(shiny)
library(tidyverse)
ui <- fluidPage(
"Hello, world!"
)
server <- function(input, output, session) {
}
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
output$summary <- renderPrint({
dataset <- get(input$dataset, "package:datasets")
summary(dataset)
})
output$table <- renderTable({
dataset <- get(input$dataset, "package:datasets")
dataset
})
}
dataset <- get(input$dataset, "package:datasets")
server <- function(input, output, session) {
# Create a reactive expression
dataset <- reactive({
get(input$dataset, "package:datasets")
})
output$summary <- renderPrint({
# Use a reactive expression by calling it like a function
summary(dataset())
})
output$table <- renderTable({
dataset()
})
}
shinyApp(ui, server)
my_matrix <- matrix((1:12), nrow=3)
print(my_matrix)
print(apply(my_matrix, 2, cumsum))
?cumsum
my_vector <- c(1,5,6,5,12,34,2,5,6,412,334,2,3,45,52,2,31,23,4)
print(sapply(my_vector, function(x)) {
tmp1 <- x*5
return(tmp1)
}
)
print(sapply(my_vector, function(x)) {
tmp1 <- x*5
return(tmp1)
}
)
print(sapply(my_vector, function(x){
tmp1 <- x*5
return(tmp1)
})
)
f <- function(x)x*x; f(8)
View(f)
(function(x,y)x+y)(5,6)
(function(x)x*x)(8)
floor(runif(6, min=0, max=57))
floor(runif(6, min=0, max=57))
library(stortingscrape)
library(tidyverse)
library(tidytext)
library(quanteda)
library(stm)
library(tidyr)
library(viridis)
library(rvest)
library(xml2)
library(httr)
library(SnowballC)
library(spacyr)
install.packages("installr")
library(installr)
updateR()
library(stortingscrape)
library(tidyverse)
library(tidytext)
library(quanteda)
library(stm)
library(tidyr)
library(viridis)
library(rvest)
library(xml2)
library(httr)
library(SnowballC)
library(spacyr)
setwd("C:/Users/Gard/OneDrive/Documents/GardSTV2022H22Repo")
load("C:/Users/gardi/OneDrive/Documents/STV2022/data/fulltokens.Rdata")
load("C:/Users/gardi/OneDrive/Documents/STV2022/data/fulltokenstrimmed.Rdata")
load("data/questionsdfm.Rdata")
load("data/usedata.Rdata")
load("C:/Users/Gard/OneDrive/Documents/STV2022/data/fulltokens.Rdata")
stm_counts <- convert(tokensquestionsdfm, "stm")
K <- c(2, 5, 10, 30, 50, 70, 100, 150, 200)
set.seed(6457)
k_results <- searchK(documents = stm_counts$documents,
vocab = stm_counts$vocab, K = K,
data = stm_counts$meta)
View(k_results)
searchplot <- tibble(Exclusivity = unlist(k_results$results$exclus),
Coherence = unlist(k_results$results$semcoh),
Heldout = unlist(k_results$results$heldout),
Residual = unlist(k_results$results$residual),
K = unlist(k_results$results$K)) %>%
pivot_longer(., cols = c("Exclusivity", "Coherence", "Heldout", "Residual"))
ggplot(searchplot, aes(x = K, y = value)) +
facet_wrap(~name, scales = "free_y") +
geom_point() +
geom_line() +
theme_classic() +
labs(y = NULL, x = "Antall emner")
?stm
View(df)
searchplot_results <- ggplot(searchplot, aes(x = K, y = value)) +
facet_wrap(~name, scales = "free_y") +
geom_point() +
geom_line() +
theme_classic() +
labs(y = NULL, x = "Antall emner")
ggsave(searchplot_results)
ggsave("ksearch", plot = searchplot_results)
`ggsave`
?ggsave
ggsave("ksearch.jpg", plot = searchplot_results)
View(tokensquestionsdfm)
?cast_dfm
topicmodel1 <- stm(tokensquestionsdfm, K = 210,
prevalence = ~ factor(gender) + factor(party_id) + factor(party_id)*factory(gender),
init.type = "Spectral", max.em.its = 500,
emtol = 1e-05, verbose = TRUE, reportevery = 10)
topicmodel1 <- stm(tokensquestionsdfm, K = 210,
prevalence = ~ factor(gender),
init.type = "Spectral", max.em.its = 500,
emtol = 1e-05, verbose = TRUE, reportevery = 10)
View(stm_counts)
load("C:/Users/Gard/OneDrive/Documents/STV2022/data/reps_preproc_bigram_pos.rda")
View(lemma_counts)
meta[2:5, c("id", "rep_id", "text")]
topicmodel1 <- stm(tokensquestionsdfm, K = 210,
init.type = "Spectral", max.em.its = 500,
emtol = 1e-05, verbose = TRUE, reportevery = 10)
View(lemma_counts)
View(topicmodel1)
View(meta)
save(k_results, file = "data/k_results.RData")
View(k_results)
save(topicmodel1, file = "data/topicmodelK_210.RData")
